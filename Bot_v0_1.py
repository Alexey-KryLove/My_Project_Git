import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
import subprocess
# from aiogram import types
# from aiogram.filters import Text
# import parsing
# import requests
# from bs4 import BeautifulSoup

citys = {
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ",
    "–ú–æ—Å–∫–≤–∞": "–ú–æ—Å–∫–≤–µ_(–í–î–ù–•)"
}


version = 'Beta_0.5'
bos = '@CatWoolf'
dp = Dispatcher()

#–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é!
@dp.message(Command('start'))
async def start_bot(message: types.Message):
    kb = [
        [types.KeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ'), types.KeyboardButton(text='–°–µ–∫—Ä–µ—Ç')],
        [types.KeyboardButton(text='–ü–æ–≥–æ–¥–∞'), types.KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True) 
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.full_name} –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!', reply_markup=keyboard)
    await asyncio.sleep(0.5)
    await message.answer('\U0001F916')


#–º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–µ 
@dp.message(F.text == '–û–ø–∏—Å–∞–Ω–∏–µ')
async def menu_message(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text ='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='description'),types.InlineKeyboardButton(text ='–°–æ–∑–¥–∞—Ç–µ–ª—å', url ='https://t.me/CatWoolf')]
    ])
    await message.answer('–í–µ—Ä—Å–∏—è –∏ C–æ–∑–¥–∞—Ç–µ–ª—å', reply_markup=kb)


#############################

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–∑ —Ñ–∞–π–ª–∞
def read_file():
    try:
        with open('pogoda.txt', "r", encoding="utf-8") as file:
            return file.readlines()
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (—á–∏—Ç–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞)
@dp.message(F.text == "–ü–æ–≥–æ–¥–∞")
async def get_weather(message: types.Message):
    lines = read_file()
    if lines:
        response = lines[0]  
        await message.reply(response)
    else:
        await message.reply("–ü–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å –Ω–µ—Ç;(")


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
@dp.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É")
async def update_weather(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data='Moscow')],
        [types.InlineKeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data='Novosibirsk')]
    ])

    await message.answer("–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb)


    
@dp.callback_query(F.data == "Moscow")
async def moscow_weather(query: types.CallbackQuery):
    await send_weather_info(query, "–ú–æ—Å–∫–≤–∞")

@dp.callback_query(F.data == "Novosibirsk")
async def novosibirsk_weather(query: types.CallbackQuery):
    await send_weather_info(query, "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
async def send_weather_info(qyery: types.CallbackQuery, city: str):
    try:
        subprocess.run([r"C:\Users\AlexHatteR\Desktop\My_Project\venv\Scripts\python.exe", "parsing.py", city], check=True)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞
        await asyncio.sleep(1)  # –ñ–¥—ë–º, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—à—É—Ç—Å—è –≤ —Ñ–∞–π–ª

        # –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lines = read_file()
        if lines:
            response = lines[0]  
            await qyery.message.answer("–ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üå§\n" + response)
        else:
            await qyery.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã üòû")
    except Exception as e:
        await qyery.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")


############################################

#–°–µ–∫—Ä–µ—Ç–∏–∫
@dp.message(F.text == "–°–µ–∫—Ä–µ—Ç")
async def sikret_message(message: types.Message):
    await message.answer('–¢—ã –Ω–∞—à–µ–ª —Å–µ–∫—Ä–µ—Ç –ª–æ–≤–∏ –ø—Ä–∏–∑—ã')
    for _ in range(3):
        await asyncio.sleep(0.5)
        await message.answer('\U0001F4A9')

# #3-—è –º–µ–Ω—é—à–∫–∞ 
# @dp.message(F.text == '–æ–±–æ –º–Ω–µ(–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)')
# async def menu_message(message: types.Message):
#     kb = types.InlineKeyboardMarkup(inline_keyboard=[
#         [types.InlineKeyboardButton(text ='–Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—è', callback_data='about_me')]
#     ])
#     await message.answer('—Ç—É—Ç —è', reply_markup=kb)

# @dp.callback_query(F.data == 'about_me')
# async def about_me_callback(callback: types.CallbackQuery):
#     await callback.message.edit_text('–ù—É –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n'
#                                      '–ø—ã—Ç–∞—é—Å—å –∑–∞—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –º–∞—à–∏–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å! –∞ –≤–æ–æ–±—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!')
    


#–ü–æ–≤—Ç–æ—Ä—è—à–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–∫—Ç—Å—Ç–∞ –±–µ–∑ –º–µ–Ω—é
@dp.message()
async def echo_message(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –¥—É–º–∞—é...')
    await asyncio.sleep(3)
    await message.send_copy(chat_id=message.chat.id)



#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    token = '7978264726:AAFE6JY3mJqKDeVGcUSy4lx1itEnAxIrTxM'
    bot = Bot(token)
    await dp.start_polling(bot)
    

if __name__ == '__main__':
    asyncio.run(main())
